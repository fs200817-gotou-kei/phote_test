■git
・リポジトリ作成
・クローン
・README.md作ってadd commit push
・git flow　initでgit-flowで運用するようにする
・developが切れていることを確認する
・あとはそのリポジトリで初期のファイルとかを入れていってfirst commitする(frontとbackは分けてcomit)
・そのあと開発はさらにそこから作業ごとにブランチを切って、あとはcomitしまくるだけ




朝のタスク
・方針としてはテストで作ったアプリを再度作っていく
・それにあたって反省点を活かして作っていく
→Slackのメモ帳、スマホのメモ帳確認
　→最初の仕様把握、設計



■テスト前に気を付けるポイント
・リレーションで参照する場合ってidだけじゃなくてオブジェクトを持つってことでよさそうだね。
・axiosからフロントは作っていってテストする
・複数画面で共通化できるパターンを想定したアプリを作る
→共通化できるけどちょっと違ってる部分がある状態のものとか(テーブルとかならカラム数だけ違うとか)
・別テーブルのidを持つ場合はそのテーブルのidしか持たないけど実際使用するときは名前で表示したりする
・html、cssやる
OK・js関連はcomponentだけでなく機能だけを備えたjsを作る場合があるため(バリデーション)
OK・jsファイルも別でつくって機能するようにしておく
OK・serviceクラスを作る(jsでもいいけどvueとかreactは専用のがあった、別ファイルでどうつかうか調査必要)
→vueの場合はtemplate返さないと注意書き出る
・ルーティングもやる
・カレンダーのライブラリとか使ってみる
・バリデーション実装(観点とか戻り値大切)
・responseEntityじゃないところの違い
・リレーションのアノテーション実装(どういうメリットあるか)
・crud
・一旦上記を満たしていれば凝ったもの作らなくていい(個別に作ってもいいかもね)
・例外処理をいろいろ想定する(今回だとapiで指定したidがなかったり、リレーションによって削除できなかったりのパターンでそれ毎にわかるよう返す)

■テスト時に気を付けるポイント
・最初に仕様を理解する(口で説明ができる程度)
・軽くどう作っていくかは考えておく(理由は打合せの際に確認する項目が出てきやすい)
・仕様理解後は不明点など打合せをする
・どう作っていくか構想を割と具体的に考える
・打合せ後タスク管理表を記載する
・揚げ足をとられないようにする(コード上で)
・機能を作る前に機能名とプラットフォーム名で付属の機能あるかチェックしたほうがいいかも
・htmlは最初に書ききったほうが良い
・命名は自分や相手が後で理解しやすい具体的なものにしておく(他の代替案と比べて何がいいか)
・設計時にはhtmlとcssの組み方、クラスをどうつけていくかとか考えたほうがいい
・必要な変数とかも気を付けたほうがいい(変数構造、処理によって変数の構造とか変わってくる)
・バリデーションは大体元々備わっているのでそれを有効活用する

下の順番で作る(cssとかでも勉強、実際にテストでは時間くうところだから)
■共通化する(上から下に作っていく)
OK・axiosのサービスクラス
・入力欄
・ボタン
・バリデーション
・モーダルウインドウ
OK・ヘッダー
・検索結果
・cssの共通ファイルとして検索結果欄と入力欄のlabel,input等は共通ファイル

■cssでクラスを共通化すべきコンポーネント
・ラベル
・入力系
・ボタン(カラー毎)
・テーブル

■テストまでにやり切りたいこと
・リダイレクト
・ビューの共通化
・非同期処理について理解深める(↓のその他メモのチェックついているやつ)
→promiseからデータとってこれないか
・idじゃなくて名前をカラムに呼び出すときのロジック(見積もりではリレーションのidだが画面上は名前)
→普通にaxiosでid検索すればいいだけっぽい
→考えたいことは変数構造(そのほかの変数も)、ロジック、今回は配列にpushも必要
→オブジェクト型とかだと値に代入したときに参照アドレスが渡されるから一旦基本型とかに渡す必要がある
　→普通に考えるとaxios側に渡したりする形でjsonを組むのは必須
→A. 必要な変数：list, selectProdutId,あとは入力フォームに結び付く変数(個別で、オブジェクト型じゃない)
　　 listにはボタンが押されたときに変数集めたタイミングでオブジェクトをそこでつくってpushする(そうすれば参照とか気にしなくていい) 
・バリデーション(実装、観点)
・ResponseEntityの注意書き
→現状のものだと、orelseThrowを空で使っているから変数に入るのはCustomer(ほかも同じ)かnullだから戻り値がResponseEntity<Customer>で成り立つ
　その処理をしていないところはエラーが返ってきてそれを返すことになる可能性があるため
　ただのCusotomerを指定してもエラー出る、だからOpstinal型を指定する
・ブラウザの注意書き
・responseEntityについて
・spring-bootでのresponseEnityの理由(検討)
・apiで対象idがなかった場合の反応
・リレーションのアノテーション作成
→メリット：参照されている側が先に削除できないようにできる(データの整合性が取れる)
　ない状態でリレーションを表そうとすると参照管理テーブルを用意する必要が出てきてしまう
　→参照されている側を先に登録しないと参照先がないってことになる、お互いに参照しあっている場合は
　　同時には登録ができないから不可能になるため参照管理テーブルが必要になる。
　　→アノテーション使えば同時登録が可能になる
→相互参照はあくまで多対多だよね。多分1対多は別であるはずだから基本そっち使う
　→相互参照だとjsonにしたときに無限でjsonしてStackoverflowになる。
　　その対策としては片方のgetterを別の名前にするか、privateにして別メソッドから使うよう運用していくか
・css共通化
・cssで検索項目ずらすのやりたい
→上側の検索と下の追加商品の検索でdivを分けて、その上のdivのheight指定して、itemを上から順に並べて
　折り返すようにする。1個目のスペースはタイトルと検索項目のmargin指定すれば普通にできる



■その他メモ
✅・axiosでデータとってくるときにserviceクラスを作ったりしてやるとreturnをする必要がある
　そこでaysnc, awaitを使って待つようにしないと先にリターンされて空の変数が渡されてしまう
　aysnc, awaitは呼び出し元でも使ってあげないとPromise型で戻ってきてしまて値を取り出したりすることができない
→基本apiからデータとってきたりするときはaysnc, await使ったほうがよさそう(じゃないと待ってくれない)reactでテストでなぜか2回レンダーされていたのも
　最初nullからの値が更新されて2回目のレンダリングが行われた可能性がある
・リレーションのdbってどうやって設定するんだろう
・バリデーションは更新とか登録の時が必要で検索のときとかは必要なさそう
・axiosを先に実装しておいたほうが楽じゃね？(vue側で映す→axios→apiって形だとbackendかvueで写ってないのか
　axiosに問題があるのか原因が一つ増えてしまう。)api一括で書くならserviceも一括でよさそう
→そこから見えるのはテストは隣合うクラスなど同士でチェックする、作成するようにしたほうがいい
　→基本はbackendに近いところからの実装のほうがいいかも
・入力するところは観点として入力テキストなのか
・lateとは宣言後に初期化されるnon-nullable変数の宣言や遅延初期化をするときに使う＾
　使用されない変数の場合は初期化もされないのでコスト削減、初期化でメソッド実行しても使用されなければそのメソッドは実行されない










■反省会



やらなくていいことをいかにやらないか



■テスト終わってから
・会社のシステムの仕様を理解してそれを実際に自分で作ってみる
→実際のソースと比べてみて自分で反省してみる
・小野さんとマルシオさんが作ったシステムのソースはどれかを聞く(お手本)
・自分がいろいろ理解して、理解すれば楽しくなる、理解できる範囲が広がることを楽しもう
・部活とかで公開レビューしてもらう
・backendって会社の何で動かしているんだろう
・sqlコツ(あんまり見えるようにならない)
→書いていったほうがいいんだろうね
・継承とかもっと勉強したい
